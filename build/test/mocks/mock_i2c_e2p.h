/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_I2C_E2P_H
#define _MOCK_I2C_E2P_H

#include "unity.h"
#include <stdbool.h>
#include <stdint.h>
#include "i2c_e2p.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_i2c_e2p_Init(void);
void mock_i2c_e2p_Destroy(void);
void mock_i2c_e2p_Verify(void);




#define e2p_write_IgnoreAndReturn(cmock_retval) e2p_write_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void e2p_write_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int8_t cmock_to_return);
#define e2p_write_StopIgnore() e2p_write_CMockStopIgnore()
void e2p_write_CMockStopIgnore(void);
#define e2p_write_ExpectAndReturn(g_i2c_dev, wr_addr, size, data, cmock_retval) e2p_write_CMockExpectAndReturn(__LINE__, g_i2c_dev, wr_addr, size, data, cmock_retval)
void e2p_write_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int g_i2c_dev, uint16_t wr_addr, const uint8_t size, const uint8_t* data, int8_t cmock_to_return);
typedef int8_t (* CMOCK_e2p_write_CALLBACK)(int g_i2c_dev, uint16_t wr_addr, const uint8_t size, const uint8_t* data, int cmock_num_calls);
void e2p_write_AddCallback(CMOCK_e2p_write_CALLBACK Callback);
void e2p_write_Stub(CMOCK_e2p_write_CALLBACK Callback);
#define e2p_write_StubWithCallback e2p_write_Stub
#define e2p_read_IgnoreAndReturn(cmock_retval) e2p_read_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void e2p_read_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int8_t cmock_to_return);
#define e2p_read_StopIgnore() e2p_read_CMockStopIgnore()
void e2p_read_CMockStopIgnore(void);
#define e2p_read_ExpectAndReturn(g_i2c_dev, rd_addr, size, data, cmock_retval) e2p_read_CMockExpectAndReturn(__LINE__, g_i2c_dev, rd_addr, size, data, cmock_retval)
void e2p_read_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int g_i2c_dev, uint16_t rd_addr, const uint8_t size, uint8_t* data, int8_t cmock_to_return);
typedef int8_t (* CMOCK_e2p_read_CALLBACK)(int g_i2c_dev, uint16_t rd_addr, const uint8_t size, uint8_t* data, int cmock_num_calls);
void e2p_read_AddCallback(CMOCK_e2p_read_CALLBACK Callback);
void e2p_read_Stub(CMOCK_e2p_read_CALLBACK Callback);
#define e2p_read_StubWithCallback e2p_read_Stub

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
